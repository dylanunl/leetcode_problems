# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next


#first approach Iteration

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        curr  = dummy = ListNode(0)   #创建一个dummy node
        
        while l1 and l2:       #如果l1和l2都不是None，那么就判断谁的小，谁放在curr后面，
            if l1.val > l2.val:     
                curr.next = l2
                l2 = l2.next
            else:
                curr.next = l1
                l1 = l1.next
            curr = curr.next
        
        curr.next = l1 or l2      #到了这一步说明l1或者l2里面至少一个是None了，所以只需要把剩下的l1或者l2加到curr.next 后面即可
        
        return dummy.next

        
        
        
        
#second approach recursion
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1 is None:
            return l2
        elif l2 is None:
            return l1
        elif l1.val <= l2.val:
            l1.next = self.mergeTwoLists(l1.next,l2)
            return l1
        else:
            l2.next = self.mergeTwoLists(l1,l2.next)
            return l2
            
